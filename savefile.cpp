/*******************************************************************************
* タイトル:		ファイルプログラム
* プログラム名:	savefile.cpp
* 作成者:		鈴木 慎一郎
* 作成日:		2020/06/21
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "file.h"
#include "string.h"
#include "score.h"
#include "savefile.h"
#include <stdio.h>

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#pragma warning(disable : 4996)


/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
SAVEDATA	g_data[FILE_MAX];		// セーブデータ作成場所


/*******************************************************************************
関数名:	void SaveData( void )
引数:	void
戻り値:	void
説明:	セーブデータを作成し、ファイルへ出力する
*******************************************************************************/
void SaveData(void)
{

	// SAVEDATA構造体ごと全部をファイルに出力する
	FILE* fp;

	// 書き込み
	fopen_s(&fp, "savedata.bin", "wb");   // ファイルをバイナリ書き込みモードでOpenする
	if (fp != NULL)        // ファイルがあれば書き込み、無ければ無視
	{
		for (int i = 0; i < FILE_MAX; i++)
		{
			fwrite(&g_data[i], 1, sizeof("savedata.bin"), fp); // 指定したアドレスから指定したバイト数分ファイルへ書き込む
		}
		fclose(fp);        // Openしていたファイルを閉じる
	}
	else
	{

	}

	rewind(stdin);
	getchar();

}


/*******************************************************************************
関数名:	void LoadData( void )
引数:	void
戻り値:	void
説明:	セーブデータをファイルから読み込む
*******************************************************************************/
void LoadData(void)
{
	int score = GetScore();

	// ファイルからセーブデータを読み込む
	FILE* fp;

	fp = fopen("savedata.bin", "rb");			// ファイルをバイナリ読み込みモードでOpenする

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{
		for (int i = 0; i < FILE_MAX; i++)
		{
			fread(&g_data[i], 1, sizeof(SAVEDATA), fp);	// 指定したアドレスへ指定したバイト数分ファイルから読み込む
			fclose(fp);								// Openしていたファイルを閉じる
		}
	}
	else
	{
		//ゼロクリア
		ZeroMemory(&g_data->r_score, sizeof(SAVEDATA));
	}

	// 結果を格納
	for (int i = 0; i < FILE_MAX; i++)
	{
		// データが有効の場合は距離チェック
		//if (g_data[i].r_score.bUse)
		//{
			// 結果がデータを超えていたら(おわり)
			if (score > g_data[i].r_score.num)
			{
				// データ配列を一つ下にずらす
				for (int j = FILE_MAX - 1; j >= i; j--)
				{
					g_data[j + 1].r_score.num = g_data[j].r_score.num;
					g_data[j].r_score.num = g_data[j + 1].r_score.num;
				}

				g_data[i].r_score.num = score;// 結果をデータに格納する
				break;
			}
			// 結果とデータが等しい場合(終わり)
			else if (g_data->score == g_data[i].r_score.num)
			{
				break;
			}
		//}
		//// 無効の場合は新規作成(おわり)
		//else
		//{
		//	g_data[i].r_score.num = g_data->score.num;
		//	g_data[i].r_score.bUse = true;
		//	break;
		//}
	}

	// 書き込み
	fopen_s(&fp, "savedata.bin", "wb");   // ファイルをバイナリ書き込みモードでOpenする
	if (fp != NULL)        // ファイルがあれば書き込み、無ければ無視
	{
		for (int i = 0; i < FILE_MAX; i++)
		{
			fwrite(&g_data[i], 1, sizeof("savedata.bin"), fp); // 指定したアドレスから指定したバイト数分ファイルへ書き込む
		}
		fclose(fp);        // Openしていたファイルを閉じる
	}

	rewind(stdin);
	getchar();

}

/*******************************************************************************
関数名:	SAVEDATA GetSaveData( void )
引数:	void
戻り値:	void
説明:	セーブデ―タの取得
*******************************************************************************/
SAVEDATA *GetSaveData(void)
{
	return &g_data[0];
}